/* eslint-disable */
/*
 * Automatically generated by 'ng g ng-alain:sta'
 * @see https://ng-alain.com/cli/sta
 *
 * Inspired by: https://github.com/acacode/swagger-typescript-api
 */

import {HttpContext, HttpHeaders} from '@angular/common/http';
import {Inject, Injectable, InjectionToken, Optional} from '@angular/core';
import {_HttpClient} from '@delon/theme';
import {Observable} from 'rxjs';

export interface STAOptions {
  headers?:
    | HttpHeaders
    | {
    [header: string]: string | string[];
  };
  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';
  withCredentials?: boolean;
  baseUrl?: string;
}

export interface STAHttpOptions extends STAOptions {
  body?: any;
  params?: any;
  observe?: 'body' | 'events' | 'response';
  reportProgress?: boolean;
  context?: HttpContext;
}

export const STA_OPTIONS = new InjectionToken<STAOptions>('STA_OPTIONS', {
  factory: () => ({withCredentials: false})
});

@Injectable()
export class STABaseService {
  readonly baseUrl: string = 'http://localhost:8080/admin';

  constructor(@Optional() @Inject(STA_OPTIONS) private globalOptions: STAOptions, protected http: _HttpClient) {
  }

  protected request<T, R>(method: string, path: string, options?: STAHttpOptions): Observable<R> {
    const {headers, withCredentials, responseType, baseUrl} = this.globalOptions;
    options = {withCredentials, responseType, ...options};
    options.headers = new HttpHeaders({...headers, ...options.headers});
    const url = `${baseUrl ?? this.baseUrl}${path}`;
    return this.http.request(method, url, options);
  }
}
